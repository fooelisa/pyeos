#!/usr/bin/env python
# -*- coding: utf-8 -*-

# Copyright 2014 Spotify AB. All rights reserved.
#
# The contents of this file are licensed under the Apache License, Version 2.0
# (the "License"); you may not use this file except in compliance with the
# License. You may obtain a copy of the License at
#
# http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
# WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
# License for the specific language governing permissions and limitations under
# the License.


"""
"""

from pyEOS import EOS
import ast
import logging

logger = logging.getLogger('eos_install_config')

DOCUMENTATION = '''
---
module: eos_install_config
author: David Barroso <dbarroso@spotify.net>
version_added: "1.0.0"
short_description: 
    Takes configuration from a file oiand loads it onto a device running EOS.
description:
    This library will take the configuration from a file and load it into a 
    device running EOS. The old configuration will be either replaced by 
    using the feature 'config replace terminal: force', or merged with the 
    running configuration. To use this module you need to enable access
    to the device via the eAPI.

requirements:
    - pyEOS

options:
    hostname:
        description: IP or FQDN of the device you want to connect to
        required: True
    username:
        description: Username
        required: True
    password:
        description: Password
        required: True
    use_ssl:
        description:
            If set to True we will connect via https, if False we will use 
            http instead. Default is True.
        required: False
    config_file:
        description: 
            File to load the configuration from.
        required: True
    commit_changes:
        description: 
            If set to True the commit will be performed. If set to False,
            we will not apply the changes, only check the differences.
            Default: False.
        required: False
    replace_config:
        description:
            If set to True the entire configuration on the device will be
            replaced during the commit. If set to False, we will merge the
            new config with the existing one. Default: False.
        required: False
    diff_file:
        description:
            A file where to store the "diff" between the running 
            configuration and the new configuration. If it's not set the 
            diff between configurations is not saved.
        required: False
'''

EXAMPLES = '''
    In our playbook would have something like:

  tasks:
    - name: Assembling configuration
      assemble: src=compiled/{{ inventory_hostname }} dest=compiled/{{ inventory_hostname }}/running.conf

    - name: Pushing configuration to EOS
      eos_install_config:
        hostname={{ inventory_hostname }}
        username=admin
        password=p4ssw0rd
        use_ssl=False
        config_file=~/spotify/network-ansible/compiled/{{ inventory_hostname }}/running.conf
        commit_changes={{ commit_changes }}
        replace_config={{ replace_config }}
        diff_file=logs/{{ inventory_hostname }}.log

    From the CLI we would trigger the playbook like:

        # We don't commit changes, we only want to check the diff
        $ ansible-playbook -v -e commit_changes=0 eos_test.yml

        or

        # We actually commit the changes
        $ ansible-playbook -v -e commit_changes=1 eos_test.yml
'''


def save_to_file(content, filename):
    with open(filename, 'w') as f:
        f.write(content)


def main():
    module = AnsibleModule(
        argument_spec=dict(
            hostname=dict(required=True),
            username=dict(required=True),
            password=dict(required=True),
            use_ssl=dict(required=False, default=True),
            config_file=dict(required=True),
            commit_changes=dict(required=False, default=False),
            replace_config=dict(required=False, default=False),
            diff_file=dict(required=False, default=None),
        ),
        supports_check_mode=True
    )

    hostname = module.params['hostname']
    username = module.params['username']
    password = module.params['password']
    use_ssl = module.params['use_ssl']

    config_file = module.params['config_file']
    commit_changes = module.params['commit_changes']
    replace_config = module.params['replace_config']
    diff_file = module.params['diff_file']

    if commit_changes.__class__ is str:
        commit_changes = ast.literal_eval(commit_changes)
    if replace_config.__class__ is str:
        replace_config = ast.literal_eval(replace_config)
    if use_ssl.__class__ is str:
        use_ssl = ast.literal_eval(use_ssl)

    device = EOS(hostname, username, password, use_ssl)
    device.open()
    device.load_candidate_config(filename=config_file)

    #content of the
    diff = device.compare_config()
    changed = len(diff) > 0

    if diff_file is not None:
        save_to_file(diff, diff_file)

    if module.check_mode or not commit_changes:
        module.exit_json(changed=False, msg=diff)
    else:
        if len(diff) > 0:
            if replace_config:
                device.replace_config()
            else:
                device.merge_config()
        module.exit_json(changed=changed, msg=diff)

    logger.info('DEVICE=%s CHANGED=%s STATUS=%s' % (hostname, len(changed.splitlines())), 'OK')

    device.close()

from ansible.module_utils.basic import *

main()
